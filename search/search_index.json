{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NetDaemon This is the application daemon project for Home Assistant. This project makes it possible to make automations using the .NET Core (3.1) framework. Why a new application daemon for Home Assistant? There already exists one!? The existing appdaemon is a great software and are using python as language and ecosystem. This is for people who loves to code in the .NET core ecosystem and c#. The daemon will be supported by all supported platforms of .NET core. Pre-Alpha - Expect things to change! This is in pre-alpha experimental phase and expect API:s to change over time. Please use and contribute ideas for improvement or better yet PR:s. Only amd64 (non arm) is currently supported but ARM devices as Raspberry PI will be supported in the near future. The daemon is currently only distributed through Hassio add-on but a docker container and instruction to run locally will be provided in time. Please see the getting started documentation for setup. IMPORTANT - YOU NEED TO RESTART THE ADD-ON EVERYTIME YOU MAKE CHANGES TO A FILE. THIS WILL CHANGE IN FUTURE RELEASES! Async model The application daemon are built entirely on the async model of .NET. This requires some knowledge of async/await/Tasks to use it properly. The docs will give you tips with do and don\u00b4ts around this but I strongly suggest you read the official docs. Here is a good start to read about async model.","title":"Welcome"},{"location":"#netdaemon","text":"This is the application daemon project for Home Assistant. This project makes it possible to make automations using the .NET Core (3.1) framework. Why a new application daemon for Home Assistant? There already exists one!? The existing appdaemon is a great software and are using python as language and ecosystem. This is for people who loves to code in the .NET core ecosystem and c#. The daemon will be supported by all supported platforms of .NET core.","title":"NetDaemon"},{"location":"#pre-alpha-expect-things-to-change","text":"This is in pre-alpha experimental phase and expect API:s to change over time. Please use and contribute ideas for improvement or better yet PR:s. Only amd64 (non arm) is currently supported but ARM devices as Raspberry PI will be supported in the near future. The daemon is currently only distributed through Hassio add-on but a docker container and instruction to run locally will be provided in time. Please see the getting started documentation for setup. IMPORTANT - YOU NEED TO RESTART THE ADD-ON EVERYTIME YOU MAKE CHANGES TO A FILE. THIS WILL CHANGE IN FUTURE RELEASES!","title":"Pre-Alpha - Expect things to change!"},{"location":"#async-model","text":"The application daemon are built entirely on the async model of .NET. This requires some knowledge of async/await/Tasks to use it properly. The docs will give you tips with do and don\u00b4ts around this but I strongly suggest you read the official docs. Here is a good start to read about async model.","title":"Async model"},{"location":"license/","text":"MIT License Copyright (c) 2018 Tomas Hellstr\u00f6m Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"API/api/","text":"NetDaemon API The netdaemon API is used to access Home Assistant features. There are a classic API and a fluent API. The project is in pre-alpha stage so the API is bound to change! Fluent API Select entities Select one or more entities to perform any kind of actions on. Examples: // Selects one entity and call action TurnOn. await Entity ( \"binary_sensor.my_pir\" ). TurnOn (). ExecuteAsync (); // Selects multiple entities and call action TurnOn await Entity ( \"binary_sensor.my_pir\" , \"binary_sensor.another_pir\" ). TurnOn (). ExecuteAsync (); TODO: Document more!!","title":"API"},{"location":"API/api/#netdaemon-api","text":"The netdaemon API is used to access Home Assistant features. There are a classic API and a fluent API. The project is in pre-alpha stage so the API is bound to change!","title":"NetDaemon API"},{"location":"API/api/#fluent-api","text":"","title":"Fluent API"},{"location":"API/api/#select-entities","text":"Select one or more entities to perform any kind of actions on. Examples: // Selects one entity and call action TurnOn. await Entity ( \"binary_sensor.my_pir\" ). TurnOn (). ExecuteAsync (); // Selects multiple entities and call action TurnOn await Entity ( \"binary_sensor.my_pir\" , \"binary_sensor.another_pir\" ). TurnOn (). ExecuteAsync (); TODO: Document more!!","title":"Select entities"},{"location":"Getting started/1_getting started/","text":"Installation Install the Hass.io add-on Add the https://github.com/helto4real/hassio-add-ons in Add new repository URL to the add-on store. Add the NetDaemon add-on. After you install it, do not start it just yet. We need to configure some stuff manually (will be improved as we come closer to release) Add default content to your configuration folder root Add the folder netdaemon to the config folder from the repo: https://github.com/helto4real/hassio-add-ons/tree/master/netdaemon The folder should contain following files and folder: Open the content in vscode If you have not installed .NET Core 3.1 SDK on your PC do that now! Link to download here Now when the root config has the netdaemon folder you can now open it with vscode. This work from the shared config drive if you use SMB share. Important that you open the folder where the cs.proj file is in the root. Open the vscode terminal and run dotnet restore , this needs to be done to get intellisense to work properly. Sometimes you need to restart vscode once for it to work. Hack away! Check out the examples in docs Todo: make link to examples here Start the add-on Now you can start the plugin, check the logs for any errors. IMPORTANT - YOU NEED TO RESTART THE ADD-ON EVERYTIME YOU MAKE CHANGES TO A FILE. THIS WILL CHANGE IN FUTURE RELEASES!","title":"Installation"},{"location":"Getting started/1_getting started/#installation","text":"","title":"Installation"},{"location":"Getting started/1_getting started/#install-the-hassio-add-on","text":"Add the https://github.com/helto4real/hassio-add-ons in Add new repository URL to the add-on store. Add the NetDaemon add-on. After you install it, do not start it just yet. We need to configure some stuff manually (will be improved as we come closer to release)","title":"Install the Hass.io add-on"},{"location":"Getting started/1_getting started/#add-default-content-to-your-configuration-folder-root","text":"Add the folder netdaemon to the config folder from the repo: https://github.com/helto4real/hassio-add-ons/tree/master/netdaemon The folder should contain following files and folder:","title":"Add default content to your configuration folder root"},{"location":"Getting started/1_getting started/#open-the-content-in-vscode","text":"If you have not installed .NET Core 3.1 SDK on your PC do that now! Link to download here Now when the root config has the netdaemon folder you can now open it with vscode. This work from the shared config drive if you use SMB share. Important that you open the folder where the cs.proj file is in the root. Open the vscode terminal and run dotnet restore , this needs to be done to get intellisense to work properly. Sometimes you need to restart vscode once for it to work. Hack away!","title":"Open the content in vscode"},{"location":"Getting started/1_getting started/#check-out-the-examples-in-docs","text":"Todo: make link to examples here","title":"Check out the examples in docs"},{"location":"Getting started/1_getting started/#start-the-add-on","text":"Now you can start the plugin, check the logs for any errors. IMPORTANT - YOU NEED TO RESTART THE ADD-ON EVERYTIME YOU MAKE CHANGES TO A FILE. THIS WILL CHANGE IN FUTURE RELEASES!","title":"Start the add-on"},{"location":"Getting started/2_basics/","text":"Basics The file structure All automation files is in the netdaemon folder directly under your configuration folder. Typically you access these files within vscode or any other editor. This should be your root directory on you hassio share in vscode: Get intellisense Before coding, run the dotnet restore to get intellisense. Create new app Automations in NetDaemon is created in apps. All apps inherit from the base class NetDaemonApp . All apps have to implement and override the function: public async override Task InitializeAsync () This function is called by the daemon at start up. Never block this function! Make sure you run your initializations and return. Example of an initialization using the fluent API: public async override Task InitializeAsync () { Entity ( \"binary_sensor.my_pir\" ) . WhenStateChange () . Call ( OnPirChanged ) . Execute (); } This initialize the app to call a function called OnPirChanged when ever the entity binary_sensor.my_pir change state. More of this in the example app. Code snippets I provide some code snippets to create a new app. Check it out.. In vscode, in the c# code file press ctrl+space and select.. More will come later. Async model NetDaemon is built on .NET and c# async model. It is important that you read up on async programming model. But here is some basics! Use the await keyword Whenever you see a function return a Task and mostly these functions has the prefix Async . Use the keyword await before calling. Example using the fluent API below: private async Task MyAsyncFunctionDoingStuff () { await MediaPlayer ( \"media_player.cool_player\" ) . Pause (). ExecuteAsync (); } Remember that the function needs to be async containing this call as the example shows. Do not use Thread.Sleep() Never use Thread.Sleep(); ! It is very important that you never use it cause it will block async operation. Use the await Task.Delay(); instead!","title":"Basics"},{"location":"Getting started/2_basics/#basics","text":"","title":"Basics"},{"location":"Getting started/2_basics/#the-file-structure","text":"All automation files is in the netdaemon folder directly under your configuration folder. Typically you access these files within vscode or any other editor. This should be your root directory on you hassio share in vscode:","title":"The file structure"},{"location":"Getting started/2_basics/#get-intellisense","text":"Before coding, run the dotnet restore to get intellisense.","title":"Get intellisense"},{"location":"Getting started/2_basics/#create-new-app","text":"Automations in NetDaemon is created in apps. All apps inherit from the base class NetDaemonApp . All apps have to implement and override the function: public async override Task InitializeAsync () This function is called by the daemon at start up. Never block this function! Make sure you run your initializations and return. Example of an initialization using the fluent API: public async override Task InitializeAsync () { Entity ( \"binary_sensor.my_pir\" ) . WhenStateChange () . Call ( OnPirChanged ) . Execute (); } This initialize the app to call a function called OnPirChanged when ever the entity binary_sensor.my_pir change state. More of this in the example app.","title":"Create new app"},{"location":"Getting started/2_basics/#code-snippets","text":"I provide some code snippets to create a new app. Check it out.. In vscode, in the c# code file press ctrl+space and select.. More will come later.","title":"Code snippets"},{"location":"Getting started/2_basics/#async-model","text":"NetDaemon is built on .NET and c# async model. It is important that you read up on async programming model. But here is some basics!","title":"Async model"},{"location":"Getting started/2_basics/#use-the-await-keyword","text":"Whenever you see a function return a Task and mostly these functions has the prefix Async . Use the keyword await before calling. Example using the fluent API below: private async Task MyAsyncFunctionDoingStuff () { await MediaPlayer ( \"media_player.cool_player\" ) . Pause (). ExecuteAsync (); } Remember that the function needs to be async containing this call as the example shows.","title":"Use the await keyword"},{"location":"Getting started/2_basics/#do-not-use-threadsleep","text":"Never use Thread.Sleep(); ! It is very important that you never use it cause it will block async operation. Use the await Task.Delay(); instead!","title":"Do not use Thread.Sleep()"},{"location":"Getting started/3_example app/","text":"Example app This application shows basic capabilities of the fluent API of NetDaemon. using System ; using System.Threading.Tasks ; using JoySoftware.HomeAssistant.NetDaemon.Common ; /// <summary> /// Example app /// </summary> public class ExampleApp : NetDaemonApp { public override async Task InitializeAsync () { Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"on\" ) . UseEntity ( \"light.kitchen_light\" ) . TurnOn () . Execute (); Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"off\" ) . AndNotChangeFor ( TimeSpan . FromMinutes ( 10 )) . UseEntity ( \"light.kitchen_light\" ) . TurnOff () . Execute (); } } The NetDaemonApp base class public class ExampleApp : NetDaemonApp All applications in netdaemon have to inherit the NetDaemonApp base class. This provides discoverability and functionality to the application. The InitializeAsync function public override async Task InitializeAsync () This async function is called by the daemon and it\u00b4s purpose is to do all the initialization of your application. Never block this function! Typically you configure what should happen when a state change or run a function every minute for an example. The InitializeAsync function Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"off\" ) . AndNotChangeFor ( TimeSpan . FromMinutes ( 10 )) . UseEntity ( \"light.kitchen_light\" ) . TurnOff () . Execute (); Function Description Entity Selects one or more entities where actions are applied WhenStateChange If state changes on previously defined entity do action AndNotChangeFor Do action only if state has not change for a period of time (10 minutes) UseEntity The action on previously selected entity/ies TurnOff The action on previously selected entity/ies Execute Ends the api call. You cannot skip this function or the automation will not be activated!","title":"Example app"},{"location":"Getting started/3_example app/#example-app","text":"This application shows basic capabilities of the fluent API of NetDaemon. using System ; using System.Threading.Tasks ; using JoySoftware.HomeAssistant.NetDaemon.Common ; /// <summary> /// Example app /// </summary> public class ExampleApp : NetDaemonApp { public override async Task InitializeAsync () { Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"on\" ) . UseEntity ( \"light.kitchen_light\" ) . TurnOn () . Execute (); Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"off\" ) . AndNotChangeFor ( TimeSpan . FromMinutes ( 10 )) . UseEntity ( \"light.kitchen_light\" ) . TurnOff () . Execute (); } }","title":"Example app"},{"location":"Getting started/3_example app/#the-netdaemonapp-base-class","text":"public class ExampleApp : NetDaemonApp All applications in netdaemon have to inherit the NetDaemonApp base class. This provides discoverability and functionality to the application.","title":"The NetDaemonApp base class"},{"location":"Getting started/3_example app/#the-initializeasync-function","text":"public override async Task InitializeAsync () This async function is called by the daemon and it\u00b4s purpose is to do all the initialization of your application. Never block this function! Typically you configure what should happen when a state change or run a function every minute for an example.","title":"The InitializeAsync function"},{"location":"Getting started/3_example app/#the-initializeasync-function_1","text":"Entity ( \"binary_sensor.kitchen_pir\" ) . WhenStateChange ( to : \"off\" ) . AndNotChangeFor ( TimeSpan . FromMinutes ( 10 )) . UseEntity ( \"light.kitchen_light\" ) . TurnOff () . Execute (); Function Description Entity Selects one or more entities where actions are applied WhenStateChange If state changes on previously defined entity do action AndNotChangeFor Do action only if state has not change for a period of time (10 minutes) UseEntity The action on previously selected entity/ies TurnOff The action on previously selected entity/ies Execute Ends the api call. You cannot skip this function or the automation will not be activated!","title":"The InitializeAsync function"}]}